#!/usr/bin/env node
/**
 * Test Script: Prompt Strengthening Validation
 * 
 * Tests the enhanced prompt system with actual AI generation
 * Validates that measurements, facts, and technical details are preserved
 * 
 * Usage:
 *   node scripts/test-prompt-generation.mjs
 * 
 * Requirements:
 *   - OPENAI_API_KEY or GEMINI_API_KEY in environment
 *   - OPENAI_ENABLED or GEMINI_ENABLED set to true
 */

import 'dotenv/config';
import { generateSubmission } from '../src/services/llm.js';
import fs from 'fs/promises';
import path from 'path';

const APPROVED_FACTS = `Subject: Development Application submission regarding the proposal at the site address provided in the application documentation.

The council's Local Environmental Plan and Development Control Plan outline guidance on traffic, noise, and neighbourhood character. Community submissions can raise planning considerations relevant to these controls.

This submission focuses only on planning matters and public interest considerations within council processes.`;

// Test concerns with your actual Currumbin data
const TEST_CONCERNS = [
  {
    key: 'bulk_excavation',
    body: 'Approximately 12,600 m³ of cut, 2,400 m³ of fill, and 7,000 m³ of soil export, with steep batters and extensive retaining walls causing significant construction impacts and permanent visual scarring.'
  },
  {
    key: 'seqrp_non_compliance',
    body: 'The development site falls within the Regional Landscape and Rural Production Area. This area aims to protect rural values from urban encroachment. The proposed educational facility is incompatible with the rural character. It undermines the purpose of maintaining the rural landscape.'
  },
  {
    key: 'strategic_framework_non_compliance',
    body: 'The proposed development does not align with the Gold Coast City Plan designation of the area as a Natural Landscape Area. The development intrudes on the rural landscape and threatens greenspace and habitat areas critical for local wildlife, including birds and koalas.'
  },
  {
    key: 'rural_zone_code_non_compliance',
    body: 'The intensity and scale of the proposed development are inconsistent with the intended land use in the Rural Zone. This urban-scale development is inappropriate for the rural landscape and violates key sections of the City Plan aimed at protecting natural landscapes and greenspace networks.'
  },
  {
    key: 'community_needs_and_infrastructure',
    body: 'The applicant has not demonstrated a legitimate need for a school in this rural setting. Most prospective students are expected to come from urban areas, contradicting the intent to preserve rural land for appropriate uses. The extended hours and lack of detailed lighting and security plans will further disturb the local community.'
  },
  {
    key: 'traffic_and_parking_issues',
    body: 'The current road infrastructure cannot support the additional traffic generated by the development. The proposed parking arrangements are inadequate, and the lack of sufficient bus and bicycle facilities will exacerbate traffic congestion and safety concerns on narrow rural roads.'
  },
  {
    key: 'amenity_and_environmental_concerns',
    body: 'The development will create noise pollution and visual intrusion, which will disrupt the tranquillity of the rural area. The proposal causes ecological disruption and increased runoff, threatening local biodiversity and water quality, while the risk of bushfires is also heightened.'
  }
];

// Data points that MUST appear in output
const REQUIRED_DATA_POINTS = [
  '12,600 m³',
  '2,400 m³',
  '7,000 m³',
  'steep batters',
  'retaining walls',
  'Regional Landscape and Rural Production Area',
  'Gold Coast City Plan',
  'South East Queensland Regional Plan',
  'Natural Landscape Area',
  'Rural Zone'
];

// Phrases that should NOT appear (hallucinations/generalizations)
const FORBIDDEN_PHRASES = [
  /substantial excavation(?! impacts)/i,  // Generic term without specifics
  /large volume(?! of)/i,                 // Generic instead of measurements
  /significant amount(?! of)/i,
  /studies show/i,                        // External research not in source
  /research indicates/i,
  /it has been proven/i,
  /experts suggest/i
];

async function validateOutput(output) {
  const results = {
    passed: [],
    failed: [],
    warnings: []
  };

  console.log('\n📊 VALIDATION RESULTS\n' + '='.repeat(60));

  // Check for required data points
  console.log('\n✓ Checking for required data preservation...');
  for (const dataPoint of REQUIRED_DATA_POINTS) {
    if (output.includes(dataPoint)) {
      results.passed.push(`✓ Found: "${dataPoint}"`);
      console.log(`  ✓ ${dataPoint}`);
    } else {
      results.failed.push(`✗ Missing: "${dataPoint}"`);
      console.log(`  ✗ MISSING: ${dataPoint}`);
    }
  }

  // Check for forbidden phrases (hallucinations)
  console.log('\n✓ Checking for hallucinations/generalizations...');
  for (const pattern of FORBIDDEN_PHRASES) {
    const match = output.match(pattern);
    if (match) {
      results.warnings.push(`⚠ Found potentially problematic phrase: "${match[0]}"`);
      console.log(`  ⚠ WARNING: "${match[0]}"`);
    } else {
      results.passed.push(`✓ Clean: No match for ${pattern}`);
    }
  }

  // Check sentence count preservation
  console.log('\n✓ Checking for sentence count preservation...');
  const concernSentences = TEST_CONCERNS.reduce((total, concern) => {
    return total + (concern.body.match(/\./g) || []).length;
  }, 0);
  const outputSentences = (output.match(/\./g) || []).length;
  const sentenceDiff = Math.abs(outputSentences - concernSentences);
  
  if (sentenceDiff <= TEST_CONCERNS.length + 5) {
    // Allow ±1 sentence per concern plus 5 for intro/conclusion
    results.passed.push(`✓ Sentence count reasonable: ${outputSentences} (source: ${concernSentences})`);
    console.log(`  ✓ Sentence count: ${outputSentences} (source had ${concernSentences})`);
  } else {
    results.warnings.push(`⚠ Sentence count may indicate summarization: ${outputSentences} vs source ${concernSentences}`);
    console.log(`  ⚠ Sentence count: ${outputSentences} (source had ${concernSentences}) - may be summarized`);
  }

  // Check word count
  const wordCount = output.split(/\s+/).length;
  console.log('\n✓ Checking word count utilization...');
  console.log(`  Word count: ${wordCount} / 2500 (${Math.round(wordCount/2500*100)}%)`);
  
  if (wordCount < 500) {
    results.warnings.push(`⚠ Word count very low (${wordCount}) - likely over-summarized`);
  } else if (wordCount < 1000) {
    results.warnings.push(`⚠ Word count low (${wordCount}) - may not be comprehensive`);
  } else {
    results.passed.push(`✓ Word count adequate: ${wordCount}`);
  }

  // Check for all concerns present
  console.log('\n✓ Checking all concerns are represented...');
  for (const concern of TEST_CONCERNS) {
    // Extract first few words as identifier
    const identifier = concern.body.split(' ').slice(0, 5).join(' ');
    if (output.toLowerCase().includes(identifier.toLowerCase())) {
      results.passed.push(`✓ Concern present: ${concern.key}`);
      console.log(`  ✓ ${concern.key}`);
    } else {
      results.failed.push(`✗ Concern possibly missing: ${concern.key}`);
      console.log(`  ✗ MISSING: ${concern.key}`);
    }
  }

  return results;
}

async function runTest() {
  console.log('🧪 PROMPT STRENGTHENING TEST\n' + '='.repeat(60));
  console.log('\nTest Configuration:');
  console.log(`  - Word Limit: 2500`);
  console.log(`  - Temperature: ${process.env.OPENAI_TEMPERATURE || 0.05}`);
  console.log(`  - Max Tokens: ${process.env.OPENAI_MAX_TOKENS || 4000}`);
  console.log(`  - Model: ${process.env.OPENAI_MODEL || 'gpt-4o-mini'}`);
  console.log(`  - Provider: ${process.env.OPENAI_ENABLED !== 'false' ? 'OpenAI' : 'Gemini'}`);
  console.log(`  - Test Concerns: ${TEST_CONCERNS.length}`);

  try {
    console.log('\n🤖 Generating submission with AI...\n');

    const startTime = Date.now();
    const result = await generateSubmission({
      meta: {
        recipient_name: 'Council Assessment Team',
        subject: 'Submission regarding Development Application',
        applicant_name: 'Test Resident',
        application_number: 'COM/2025/271',
        site_address: '940 Currumbin Creek Road'
      },
      approvedFacts: APPROVED_FACTS,
      selectedConcerns: TEST_CONCERNS,
      styleSample: 'I am writing to formally object to this development application.',
      allowedLinks: []
    });

    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    console.log(`✓ Generation completed in ${duration}s`);
    console.log(`  Provider: ${result.provider}`);
    console.log(`  Model: ${result.model}`);
    console.log(`  Temperature: ${result.temperature}`);
    console.log(`  Tokens: ${result.usage.prompt || 'N/A'} → ${result.usage.completion || 'N/A'}`);

    // Save output to file
    const outputDir = path.join(process.cwd(), 'test-output');
    await fs.mkdir(outputDir, { recursive: true });
    const outputFile = path.join(outputDir, `test-generation-${Date.now()}.txt`);
    await fs.writeFile(outputFile, result.finalText, 'utf-8');
    console.log(`\n💾 Output saved to: ${outputFile}`);

    // Validate output
    const validation = await validateOutput(result.finalText);

    // Summary
    console.log('\n' + '='.repeat(60));
    console.log('📈 TEST SUMMARY\n');
    console.log(`✓ Passed checks: ${validation.passed.length}`);
    console.log(`✗ Failed checks: ${validation.failed.length}`);
    console.log(`⚠ Warnings: ${validation.warnings.length}`);

    if (validation.failed.length > 0) {
      console.log('\n❌ FAILED CHECKS:');
      validation.failed.forEach(f => console.log(`  ${f}`));
    }

    if (validation.warnings.length > 0) {
      console.log('\n⚠️  WARNINGS:');
      validation.warnings.forEach(w => console.log(`  ${w}`));
    }

    if (validation.failed.length === 0) {
      console.log('\n✅ TEST PASSED - Prompt strengthening is working correctly!');
      console.log('   All required data points preserved, no hallucinations detected.');
    } else {
      console.log('\n⚠️  TEST NEEDS ATTENTION - Some data points were not preserved.');
      console.log('   Review the output file and consider further prompt adjustments.');
    }

    console.log('\n📄 Review the full output at:', outputFile);
    console.log('\n' + '='.repeat(60));

    return validation.failed.length === 0 ? 0 : 1;

  } catch (error) {
    console.error('\n❌ TEST FAILED WITH ERROR:\n');
    console.error(error.message);
    console.error('\nStack trace:', error.stack);
    return 1;
  }
}

// Run the test
runTest()
  .then(exitCode => process.exit(exitCode))
  .catch(error => {
    console.error('Unhandled error:', error);
    process.exit(1);
  });

